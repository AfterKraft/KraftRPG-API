// Gradle dependencies
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "http://repository.jboss.org/nexus/content/groups/public/"
        }

    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.1.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
    }
}

// Plugins
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'license'
apply plugin: 'checkstyle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'signing'

defaultTasks 'clean', 'licenseFormat', 'check', 'build'

group 'com.afterkraft.kraftrpg'
archivesBaseName = 'KraftRPG-API'
version '0.0.5-SNAPSHOT'

// Minimum version of Java required
sourceCompatibility = 1.7
targetCompatibility = 1.7

// Project dependencies
repositories {
    mavenCentral()
    maven {
        url "http://nexus.afterkraft.com/content/groups/public/"
    }
    maven {
        url "http://repo.spongepowered.org/Sponge/maven/"
    }
}

dependencies {
    compile 'com.google.guava:guava:18.0'
    compile 'org.spongepowered:spongeapi:1.1-SNAPSHOT'
    compile 'com.flowpowered:flow-math:0.1.0-SNAPSHOT'
    testCompile 'junit:junit:4.11'
    testCompile 'org.powermock:powermock-module-junit4:1.5.2'
    testCompile 'org.powermock:powermock-api-easymock:1.5.2'
    testCompile 'org.powermock:powermock-api-mockito:1.5.2'
    testCompile 'org.easymock:easymock:3.2'
    testCompile 'commons-io:commons-io:2.4'
}

// Generates javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
    javadoc.options.links("http://docs.guava-libraries.googlecode.com/git-history/v18.0/javadoc/",
            "http://spongepowered.github.io/SpongeAPI/",
            "http://docs.oracle.com/javase/7/docs/api/")
}
// Generates sources.jar
task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

ext {
    projectName = 'KraftRPG-API'
    inceptionYear = '2014'
    packaging = 'jar'
    url = 'http://afterkraft.com/'
    description = "Common API for KraftRPG."
    organization = 'AfterKraft KraftDev Team'
    pomFile = file("${project.projectDir}/pom.xml")
    buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
    ciSystem = project.hasProperty("ciSystem") ? ciSystem : 'unknown'
    commit = project.hasProperty("commit") ? commit : 'unknown'
}

configurations {
    pom
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

idea {
    project {
        jdkName = '1.7'
        languageLevel = '1.7'
    }
}
def sonatypeUser = hasProperty('afterkraftUser') ? sonatypeUser : System.getenv('afterkraftUser')
def sonatypePassword = hasProperty('afterkraftPassword') ? sonatypePassword : System.getenv('afterkraftPassword')
// Vault
uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment ->
            signing.signPom(deployment)
        }
        repository(id: 'afterkraft', url: "http://nexus.afterkraft.com/content/repositories/releases") {
            authentication(userName: sonatypeUser, password: sonatypePassword)

        }
        snapshotRepository(id: 'afterkraft', url: "http://nexus.afterkraft.com/content/repositories/snapshots") {
            authentication(userName: sonatypeUser, password: sonatypePassword)
        }
        pom {
            groupId = project.group
            version = project.version
            artifactId = project.archivesBaseName
            project {
                name project.archivesBaseName
                packaging 'jar'
                description 'Common API for KraftRPG.'
                url 'http://afterkraft.com/'
                scm {
                    url 'https://github.com/AfterKraft/KraftRPG-API'
                    connection 'git'
                    developerConnection 'git@github.com:AfterKraft/KraftRPG-API.git'
                }
                licenses {
                    license {
                        name 'The MIT License'
                        url 'http://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'gabizou'
                        name 'Gabriel Harris-Rouquette'
                        email 'gabizou@me.com'
                    }
                }
            }
        }
    }
}

// We need this AFTER the configuration of the uploadArchives task for maven-publish-auth to work
apply plugin: 'maven-publish-auth'

signing {
    required {
        gradle.taskGraph.hasTask("uploadArchives")
    }
    sign configurations.archives
}

processResources {
    from 'LICENSE'
}

license {
    ext.name = project.name
    ext.organization = project.organization
    ext.url = project.url
    ext.year = project.inceptionYear
    exclude "**/*.info"
    exclude "assets/**"
    header file("KRAFTRPG-LICENSE")
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

checkstyle {
    configProperties = [
            "name"        : project.name,
            "organization": project.organization,
            "url"         : project.url,
            "year"        : project.inceptionYear
    ]
    configFile = file("checkstyle.xml")
}


jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
                "Built-By": System.properties['user.name'],
                "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
                "Implementation-Vendor": url
        )
    }
    from ("${projectDir}") {
        include('KRAFTRPG-LICENSE', 'README.md')
    }
}

configure([compileJava, compileTestJava]) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    options.deprecation = true
    options.encoding = 'utf8'
}
