// Gradle dependencies
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = 'gradle-plugins'
            url = 'https://plugins.gradle.org/m2'
        }
        maven {
            url "http://repository.jboss.org/nexus/content/groups/public/"
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }

    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'gradle.plugin.net.minecrell:licenser:0.2.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
        classpath 'org.spongepowered:event-impl-gen:5.0.2'
        classpath 'org.spongepowered:spongegradle:0.8.1'
    }
}

// Plugins
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'signing'
apply plugin: 'org.spongepowered.gradle'
apply plugin: 'event-impl-gen'
apply plugin: 'net.minecrell.licenser'


defaultTasks 'clean', 'licenseFormat', 'check', 'build'

group 'com.afterkraft.kraftrpg'
archivesBaseName = 'KraftRPG-API'
version '0.0.5-SNAPSHOT'

// Minimum version of Java required
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Project dependencies
repositories {
    mavenCentral()
    maven {
        url "https://repo.spongepowered.org/maven/"
    }
}

dependencies {
    compile 'org.spongepowered:spongeapi:7.0.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.powermock:powermock-module-junit4:1.7.4'
    testCompile 'org.powermock:powermock-api-mockito:1.7.4'
    testCompile "org.mockito:mockito-core:1.+"
}

// Generates javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.links(
            'http://www.slf4j.org/apidocs/',
            'https://google.github.io/guava/releases/17.0/api/docs/',
            'https://google.github.io/guice/api-docs/4.0/javadoc/',
            'https://zml2008.github.io/configurate/configurate-core/apidocs/',
            'https://zml2008.github.io/configurate/configurate-hocon/apidocs/',
            'https://flowpowered.com/math/',
            'https://flowpowered.com/noise/',
            'http://asm.ow2.org/asm50/javadoc/user/',
            'https://docs.oracle.com/javase/8/docs/api/'
    )

    // Disable the crazy super-strict doclint tool in Java 8
    options.addStringOption('Xdoclint:none', '-quiet')
}
// Generates sources.jar
task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

ext {
    projectName = 'KraftRPG-API'
    inceptionYear = '2014'
    packaging = 'jar'
    url = 'http://afterkraft.com/'
    description = "API for the KraftRPG plugin."
    organization = 'AfterKraft KraftDev Team'
    pomFile = file("${project.projectDir}/pom.xml")
    buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
    ciSystem = project.hasProperty("ciSystem") ? ciSystem : 'unknown'
    commit = project.hasProperty("commit") ? commit : 'unknown'
}

configurations {
    pom
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

def sonatypeUser = hasProperty('afterkraftUser') ? sonatypeUser : System.getenv('afterkraftUser')
def sonatypePassword = hasProperty('afterkraftPassword') ? sonatypePassword : System.getenv('afterkraftPassword')
// Vault
uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment ->
            signing.signPom(deployment)
        }
        repository(id: 'afterkraft', url: "http://nexus.afterkraft.com/content/repositories/releases") {
            authentication(userName: sonatypeUser, password: sonatypePassword)

        }
        snapshotRepository(id: 'afterkraft', url: "http://nexus.afterkraft.com/content/repositories/snapshots") {
            authentication(userName: sonatypeUser, password: sonatypePassword)
        }
        pom {
            groupId = project.group
            version = project.version
            artifactId = project.archivesBaseName
            project {
                name project.archivesBaseName
                packaging 'jar'
                description 'Common API for RpgCommon.'
                url 'http://afterkraft.com/'
                scm {
                    url 'https://github.com/AfterKraft/RpgCommon-API'
                    connection 'git'
                    developerConnection 'git@github.com:AfterKraft/RpgCommon-API.git'
                }
                licenses {
                    license {
                        name 'The MIT License'
                        url 'http://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'gabizou'
                        name 'Gabriel Harris-Rouquette'
                        email 'gabizou@me.com'
                    }
                }
            }
        }
    }
}

// We need this AFTER the configuration of the uploadArchives task for maven-publish-auth to work
apply plugin: 'maven-publish-auth'

signing {
    required {
        gradle.taskGraph.hasTask("uploadArchives")
    }
    sign configurations.archives
}

processResources {
    from 'LICENSE'
}

license {
    ext.name = project.name
    ext.organization = project.organization
    ext.url = project.url
    ext.year = project.inceptionYear
    exclude "**/*.info"
    exclude "assets/**"
    header file("KRAFTRPG-LICENSE")
    sourceSets = project.sourceSets
    ignoreFailures false
    newLine = false
}

checkstyle {
    configProperties = [
            "name"        : project.name,
            "organization": project.organization,
            "url"         : project.url,
            "year"        : project.inceptionYear
    ]
    configFile = file("checkstyle.xml")
}


jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
                "Built-By": System.properties['user.name'],
                "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
                "Implementation-Vendor": url
        )
    }
    from ("${projectDir}") {
        include('KRAFTRPG-LICENSE', 'README.md')
    }
}

configure([compileJava, compileTestJava]) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    options.deprecation = true
    options.encoding = 'utf8'
}
