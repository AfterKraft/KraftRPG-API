package com.afterkraft.kraftrpg.api.spells;

import java.util.Arrays;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Random;
import java.util.Set;

import org.bukkit.configuration.Configuration;
import org.bukkit.configuration.MemoryConfiguration;
import org.bukkit.entity.Entity;

import com.afterkraft.kraftrpg.api.RPGPlugin;
import com.afterkraft.kraftrpg.api.entity.RPGPlayer;

/**
 * Author: gabizou
 */
public abstract class Spell<T extends Spell.SpellArgument> {

    public final RPGPlugin plugin;
    private final Configuration defaultConfig = new MemoryConfiguration();
    private static Random random = new Random();
    private final Set<SpellType> spellTypes = EnumSet.noneOf(SpellType.class);

    public Spell(RPGPlugin plugin, String name) {
        this.plugin = plugin;
    }

    public abstract String getDescription(RPGPlayer rpgPlayer);

    /**
     * Request this spell to parse the given arguments executed by various
     * means. SpellArguments are state objects that RPGPlayers can cache for
     * binds and other possible uses.
     * @param player - The RPGPlayer to be used, this is passed solely for
     *               the benefit of the SpellArgument creation
     * @param args - Raw string arguments that are passed from any source
     * @return a new SpellArgument object generated by this Spell for this Spell's use
     */
    public abstract T parse(RPGPlayer player, String[] args);

    /**
     * Cast this spell according to this spell's defined SpellArgument. This
     * can be used in instances like bound spells to Items and
     * @param player - The RPGPlayer to cast this spell
     * @param argument - The SpellArgument to use this spell with
     * @return true if Spell usage was successfull
     */
    public abstract boolean useSpell(RPGPlayer player, T argument);

    public final void addSpellTarget(Entity entity, RPGPlayer player) {

    }

    public boolean isType(SpellType type) {
        return spellTypes.contains(type);
    }

    /**
     * SpellArgument is a raw instance Object that allows saving the state of
     * a Spell, either through binds or other systems. The raw arguments
     * originally passed to the {@link Spell#parse(RPGPlayer, String[])} method
     * is kept for storage purposes and allows for a Spell to re-generate the
     * SpellArgument state after a Player login.
     */
    public abstract class SpellArgument {

        private final String[] rawArgs;

        protected SpellArgument(String[] args) {
            this.rawArgs = args;
        }

        /**
         * A Useful in differentiating between SpellArguments.
         * @return the given name of this SpellArgument
         */
        public abstract String getName();

        /**
         * Return a copy of the original arguments parsed by this
         * SpellArgument's Spell. This is safe to use for storage purposes.
         * <p>
         * @return an unmodifiable List of raw arguments
         */
        public final List<String> getRawArguments() {
            return Collections.unmodifiableList(
                    Arrays.asList(
                            Arrays.copyOf(this.rawArgs, this.rawArgs.length)));
        }

    }
}
