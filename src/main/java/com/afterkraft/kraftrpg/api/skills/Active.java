/*
 * Copyright 2014 Gabriel Harris-Rouquette
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http:www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.afterkraft.kraftrpg.api.skills;

import com.afterkraft.kraftrpg.api.entity.SkillCaster;
import com.afterkraft.kraftrpg.api.util.SkillRequirement;

/**
 * Represents a Skill that only has results on activation through command or
 * binding. As this is an active skill that requires some possible binding or
 * targetting, usage should be included by the implementation for players to
 * understand how to use this active skill.
 * <p/>
 * Recommended use of this interface is {@link ActiveSkill}
 */
public interface Active<T extends SkillArgument> extends ISkill {

    /**
     * Returns the instructional usage for this skill, including various
     * accepted arguments handled in {@link #parse(com.afterkraft.kraftrpg.api.entity.SkillCaster,
     * String[])}
     *
     * @return the instructional usage for this skill
     */
    public String getUsage();

    /**
     * Set the instructional usage for this skill
     *
     * @param usage the instructional usage for this skill
     */
    public void setUsage(String usage);

    /**
     * The standard warmup process for an Active Skill. This is called prior
     *
     * @param caster
     */
    public void onWarmUp(SkillCaster caster);

    /**
     * Request this skill to parse the given arguments executed by various
     * means. skillArguments are state objects that RPGPlayers can cache for
     * binds and other possible uses.
     *
     * @param caster - The Champion to be used, this is passed solely for the
     * benefit of the SkillArgument creation
     * @param args - Raw string arguments that are passed from any source
     * @return a new SkillArgument object generated by this Skill for this
     * Skill's use
     */
    public T parse(SkillCaster caster, String[] args);

    /**
     * Performs checks that this skill can be casted by this {@link
     * com.afterkraft.kraftrpg.api.entity.Champion}
     * <p/>
     * It is not required to override this method unless customized checks need
     * to be performed on top of the current checks.
     * <p/>
     * It is possible to force the champion to cast this skill with the forced
     * argument to ignore any {@link com.afterkraft.kraftrpg.api.entity.roles.Role#hasSkill(ISkill)}
     * checks within.
     *
     * @param caster
     * @param argument the parsed argument dictated from this skill.
     * @param forced whether to force the champion to cast this skill.
     * @return the SkillCastResult whether it is allowed, denied, or lack of
     * resources required, etc.
     */
    public SkillCastResult canCast(SkillCaster caster, T argument, boolean forced);

    /**
     * Cast this skill according to this skill's defined SkillArgument. This can
     * be used in instances like bound skills to Items and
     *
     * @param caster - The Champion to cast this skill
     * @param argument - The SkillArgument to use this skill with
     * @return the SkillCastResult for using the skill with the given argument.
     */
    public SkillCastResult useSkill(SkillCaster caster, T argument);

    /**
     * Return the calculated SkillRequirement for the queried {@link
     * com.afterkraft.kraftrpg.api.entity.Champion}. This can be overriden to
     * use different requirements dependent on various things, such as
     * Attributes, the experience level of the Champion, and other things.
     *
     * @param caster the Champion to check
     * @return a new SkillRequirement for the queried champion
     */
    public SkillRequirement getSkillRequirement(SkillCaster caster);

    /**
     * Check if the designated Champion has the provided SkillRequirement. This
     * is NOT asych safe as the player's inventory is being reviewed.
     *
     * @param requirement
     * @param caster
     * @return
     */
    public boolean hasSkillRequirement(SkillRequirement requirement, SkillCaster caster);

    /**
     * Check if using this Skill grants the {@link com.afterkraft.kraftrpg.api.entity.Champion}
     * experience on skill casts.
     *
     * @return
     */
    public boolean grantsExperienceOnCast();

}
